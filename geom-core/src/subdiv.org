#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thinggeomcoresubdiv][Namespace: thi.ng.geom.core.subdiv]]
     - [[#iterative-subdivision][Iterative subdivision]]
         - [[#example--comparison][Example & comparison]]
         - [[#implementation][Implementation]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Namespace: thi.ng.geom.core.subdiv

** Iterative subdivision

http://algorithmicbotany.org/papers/subgpu.sig2003.pdf

*** Example & comparison

[[http://media.thi.ng/geom/subdiv/sd-compare.svg]]

#+BEGIN_SRC clojure
  (require '[thi.ng.geom.core :as g])
  (require '[thi.ng.geom.core.vector :refer [vec2]])
  (require '[thi.ng.geom.core.subdiv :as sd])
  (require '[thi.ng.geom.svg.core :as svg])
  (require '[thi.ng.dstruct.core :as d])

  (defn demo
    [points [id col]]
    (->> (range 1 6)
         (map
          #(let [p (->> points
                        (mapv #(g/+ % (* (dec %) 120) 0))
                        (d/iterate-n % (partial sd/subdivide-closed (id sd/schemes))))]
             (svg/group
              {:stroke col}
              (svg/polygon p)
              (map #(svg/circle % 1.5) p))))))

  (def points
    (->> [[10 10] [60 60] [110 10] [110 60] [85 80] [110 100] [110 150] [60 100] [10 150] [10 100] [35 80] [10 60]]
         (mapv vec2)))

  (->> [[:chaikin "red"] [:cubic-bezier "blue"]]
       (map #(demo points %))
       (apply svg/svg
              {:width 600 :height 200 :fill "none" :font-family "Arial" :font-size 12}
              (svg/text [300 170] ":chaikin" {:fill "red"})
              (svg/text [300 186] ":cubic-bezier" {:fill "blue"}))
       (svg/serialize)
       (spit "sd-compare.svg"))
#+END_SRC

*** Implementation

#+BEGIN_SRC clojure :noweb-ref subdiv
  (defn subdiv-kernel3
    [u v [a b c]]
    [(->> (g/* c (u 2)) (g/madd b (u 1)) (g/madd a (u 0)))
     (->> (g/* c (v 2)) (g/madd b (v 1)) (g/madd a (v 0)))])

  (defn subdiv-kernel5
    [u v [a b c d e]]
    [(->> (g/* e (u 4)) (g/madd d (u 3)) (g/madd c (u 2)) (g/madd b (u 1)) (g/madd a (u 0)))
     (->> (g/* e (v 4)) (g/madd d (v 3)) (g/madd c (v 2)) (g/madd b (v 1)) (g/madd a (v 0)))])

  (defn subdivide-closed
    ([scheme points]
       (subdivide-closed (:fn scheme) (:coeff scheme) points))
    ([f [u v] points]
       (let [n  (count u)
             n2 (int (/ n 2))]
         (->> (concat (take-last n2 points) points (take n2 points))
              (partition n 1)
              (mapcat #(f u v %))))))

  (def schemes
    {:chaikin      {:fn subdiv-kernel3 :coeff [[0.25 0.75 0] [0 0.75 0.25]]}
     :cubic-bezier {:fn subdiv-kernel3 :coeff [[0.125 0.75 0.125] [0 0.5 0.5]]}})
#+END_SRC


** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/core/subdiv.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.core.subdiv
    #?(:cljs
       (:require-macros
        [thi.ng.math.macros :as mm]))
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     #?(:clj [thi.ng.math.macros :as mm])))

  <<subdiv>>
#+END_SRC
