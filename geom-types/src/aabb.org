#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeomaabb][thi.ng.geom.aabb]]
     - [[#constructors][Constructors]]
     - [[#type-specific-functions][Type specific functions]]
     - [[#protocol-implementations][Protocol implementations]]
         - [[#parea][PArea]]
         - [[#pbounds][PBounds]]
         - [[#pboundingsphere][PBoundingSphere]]
         - [[#pboundary][PBoundary]]
         - [[#pcenter][PCenter]]
         - [[#pclassify][PClassify]]
         - [[#pedgeaccess-pfaceaccess--pvertexaccess][PEdgeAccess, PFaceAccess & PVertexAccess]]
         - [[#pintersect][PIntersect]]
         - [[#pmeshconvert][PMeshConvert]]
         - [[#ppointmap][PPointMap]]
         - [[#todo-pproximity][TODO PProximity]]
         - [[#todo-psample][TODO PSample]]
         - [[#todo-psetops][TODO PSetOps]]
         - [[#psubdivide][PSubdivide]]
         - [[#todo-ptessellate][TODO PTessellate]]
             - [[#todo-only-keep-faces-on-the-surface-of-the-original-box-no-inside-walls][TODO Only keep faces on the surface of the original box (no inside walls)]]
         - [[#transformations][Transformations]]
         - [[#pvolume][PVolume]]
         - [[#end-of-implementation][End of implementation]]
     - [[#complete-namespace-definition][Complete namespace definition]]
     - [[#tests][Tests]]
         - [[#todo-add-rotate-tests][TODO add rotate tests]]
         - [[#todo-add-isec-tests][TODO add isec tests]]

* thi.ng.geom.aabb

** Constructors

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn aabb
    ([] (thi.ng.geom.types.AABB. (vec3 0.0) (vec3 1.0)))
    ([size] (thi.ng.geom.types.AABB. (vec3 0.0) (vec3 size)))
    ([o size] (thi.ng.geom.types.AABB. (vec3 o) (vec3 size)))
    ([sx sy sz] (thi.ng.geom.types.AABB. (vec3 0.0) (vec3 sx sy sz))))
  
  (defn aabb-from-minmax
    [p q]
    (let [p (vec3 p)
          q (vec3 q)
          p (g/min p q)]
      (thi.ng.geom.types.AABB. p (g/- (g/max p q) p))))
#+END_SRC

** Type specific functions

#+BEGIN_SRC clojure :noweb-ref helpers

#+END_SRC

** Protocol implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.AABB
#+END_SRC

*** PArea

#+BEGIN_SRC clojure :noweb-ref impl
  g/PArea
  (area [{[w h d] :size}] (* 2.0 (mm/madd w h d h w d)))
#+END_SRC

*** PBounds

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBounds
  (bounds [_] _)
  (width  [_] (nth (:size _) 0))
  (height [_] (nth (:size _) 1))
  (depth  [_] (nth (:size _) 2))
#+END_SRC

*** PBoundingSphere

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundingSphere
  (bounding-sphere
   [{p :p size :size}]
   (let [ext (g/* size 0.5)]
     (tu/bounding-sphere (g/+ p ext) (g/mag ext))))
#+END_SRC

*** PBoundary

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundary
  (contains-point?
   [{p :p s :size} q]
   (and (m/in-range? (p 0) (+ (p 0) (s 0)) (q 0))
        (m/in-range? (p 1) (+ (p 1) (s 1)) (q 1))
        (m/in-range? (p 2) (+ (p 2) (s 2)) (q 2))))
#+END_SRC

*** PCenter

#+BEGIN_SRC clojure :noweb-ref impl
  g/PCenter
  (center
   ([{p :p size :size}]
      (thi.ng.geom.types.AABB. (g/* size -0.5) size))
   ([{size :size} q]
      (thi.ng.geom.types.AABB. (g/madd size -0.5 q) size)))
  (centroid
   [_] (g/madd (:size _) 0.5 (:p _)))
#+END_SRC

*** PClassify

#+BEGIN_SRC clojure :noweb-ref impl
  g/PClassify
  (classify-point
   [{p :p size :size} [x y z :as q]]
   (let [[x1 y1 z1] p
         [x2 y2 z2] (g/+ p size)
         on-plane? (fn [[minp maxp p min1 max1 min2 max2 c1 c2]]
                     (and (or (m/delta= minp p *eps*)
                              (m/delta= maxp p *eps*))
                          (m/in-range? min1 max1 c1)
                          (m/in-range? min2 max2 c2)))]
     (if (some on-plane?
               [[x1 x2 x y1 y2 z1 z2 y z]
                [y1 y2 y x1 x2 z1 z2 x z]
                [z1 z2 z x1 x2 y1 y2 x y]])
       0
       (if (and (m/in-range? x1 x2 x)
                (m/in-range? y1 y2 y)
                (m/in-range? z1 z2 z))
         1 -1))))
#+END_SRC

*** PEdgeAccess, PFaceAccess & PVertexAccess                         :verify:

  : e +----+ h
  :   |\   :\
  :   |f+----+ g
  :   | |  : |
  : a +-|--+d|
  :    \|   \|
  :   b +----+ c

Faces are always returned in this order: east, west, north, south,
front, back (see diagram below).

#+BEGIN_SRC clojure :noweb-ref impl
  g/PVertexAccess
  (vertices
   [{a :p size :size}]
   (let [[x1 y1 z1] a
         [x2 y2 z2 :as g] (g/+ a size)
         b (vec3 x1 y1 z2) c (vec3 x2 y1 z2)
         d (vec3 x2 y1 z1) e (vec3 x1 y2 z1)
         f (vec3 x1 y2 z2) h (vec3 x2 y2 z1)]
     [a b c d e f g h]))
  g/PEdgeAccess
  (edges
   [_]
   (let [[a b c d e f g h] (g/vertices _)]
     [[a b] [b c] [c d] [d a] ;; bottom
      [e f] [f g] [g h] [h e] ;; top
      [a e] [b f]             ;; left
      [c g] [d h]             ;; right
      ]))
  g/PFaceAccess
  (faces
   [_]
   (let [[a b c d e f g h] (g/vertices _)]
     [[c d h g]
      [a b f e]
      [e f g h]
      [a d c b]
      [b c g f]
      [a e h d]]))
#+END_SRC

*** PIntersect                                                       :verify:

#+BEGIN_SRC clojure :noweb-ref impl
  g/PIntersect
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.AABB s)
      (isec/intersect-aabb-aabb? _ s)
    (instance? thi.ng.geom.types.Sphere s)
      (isec/intersect-aabb-sphere? _ s)
    :default (err/type-error! "AABB" s)))
#+END_SRC

*** PMeshConvert

#+BEGIN_SRC clojure :noweb-ref impl
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([_ {:keys [mesh flags] :or {flags "nsewfb"}}]
      (let [[a b c d e f g h] (g/vertices _)
            [tp bt rt lf fr bk] (d/demunge-flags-seq flags "nsewfb")]
        (->> [(if fr [b c g f])
              (if bk [a e h d])
              (if lf [a b f e])
              (if rt [c d h g])
              (if tp [e f g h])
              (if bt [a d c b])]
             (sequence (filter identity)) ;; FIXME eduction
             (g/into (or mesh (bm/basic-mesh)))))))
#+END_SRC

*** PPointMap

- =map-point= takes an AABB and 3D point, returns the point in
  normalized UVW coords in local box space, where [0,0,0] is
  equivalent to the AABB's min point and [1,1,1] the point diagonally
  opposite. If any of the resulting coordinates is outside the 0.0 ..
  1.0 interval, the orginal point was outside the box.

- =unmap-point= is the inverse operation of =map-point=. It maps a
  point in local UVW coordinates to its world position.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PPointMap
  (map-point
   [{:keys [p size]} q]
   (vec3
    (mm/subdiv (q 0) (p 0) (size 0))
    (mm/subdiv (q 1) (p 1) (size 1))
    (mm/subdiv (q 2) (p 2) (size 2))))
  (unmap-point
   [_ q] (g/madd q (:size _) (:p _)))
#+END_SRC

*** TODO PProximity

#+BEGIN_SRC clojure :noweb-ref impl
  g/PProximity
  (closest-point [_ p] nil)
#+END_SRC

*** TODO PSample

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSample
  (random-point-inside
   [{p :p size :size}]
   (let [[x1 y1 z1] p
         [x2 y2 z2] (g/+ p size)]
     (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))
  (random-point
   [{p :p size :size}]
   (let [[x1 y1 z1] p
         [x2 y2 z2] (g/+ p size)
         id (int (m/random 6))]
     (cond
      (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))
      (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))
      :default (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))
#+END_SRC

*** TODO PSetOps
    - Note taken on [2015-03-15 Sun 00:50] \\
      Maybe `difference` isn't suitable here and should only implement ops which retain AABB type. Difference already implemented in csg ns

The implementations for this protocol are only intended to work with
other AABBs and no type checking is done.

- =union= returns the union box of both args
- =intersection= returns the AABB of the intersection volume of both
  args or =nil= if there's no overlap. Intersection is defined also
  for touching boxes or if overlap is only a single point (in which
  case the size of the resulting AABB will be zero)
- =difference= (still missing) will return a mesh of the remaining
  volume after the 2nd box has been subtracted from the first (or
  =nil= in case of no overlap)

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSetOps
  (union
   [{pa :p sa :size} {pb :p sb :size}]
   (let [p (g/min pa pb)]
     (thi.ng.geom.types.AABB. p (g/- (g/max (g/+ pa sa) (g/+ pb sb)) p))))
  (intersection
   [_ b]
   (let [pa (:p _) qa (g/+ pa (:size _))
         pb (:p b) qb (g/+ pb (:size b))
         p' (g/max pa pb)
         q' (g/min qa qb)
         s' (g/- q' p')]
     (if (every? #(>= % 0) s')
       (thi.ng.geom.types.AABB. p' s'))))
#+END_SRC
  
*** PSubdivide

An AABB can be subdivided into smaller ones, i.e. to create a seq of
uniform grid cells. The following options can be given as a 2nd
argument map:

| Key       | Description                                                          | Default |
|-----------+----------------------------------------------------------------------+---------|
| =:num=    | number of cols/rows/slices the box will be uniformly subdivided into |       1 |
| =:cols=   | number of times the box will be subdivided along the X-axis          |       1 |
| =:rows=   | number of times the box will be subdivided along the Y-axis          |       1 |
| =:slices= | number of times the box will be subdivided along the Z-axis          |       1 |

When =:num= is given, the resulting AABBs will retain the aspect ratio
of the original. If specified, =:cols=, =:rows= and =:slices= will
take precedence over =:num=, but the latter will be used as default
for missing args. AABBs are returned as a lazyseq starting from =:p=
of the original with inner sorting over XYZ.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSubdivide
  (subdivide
   ([_] (g/subdivide _ {}))
   ([{p :p size :size} {:keys [num cols rows slices] :or {num 1}}]
      (let [sx (or cols num)
            sy (or rows num)
            sz (or slices num)
            s (g/div size sx sy sz)]
        (for [z (butlast (m/norm-range sz))
              y (butlast (m/norm-range sy))
              x (butlast (m/norm-range sx))]
          (thi.ng.geom.types.AABB. (g/madd (vec3 x y z) size p) s)))))
#+END_SRC

*** TODO PTessellate
**** TODO Only keep faces on the surface of the original box (no inside walls)
    - Note taken on [2015-03-15 Sun 00:55] \\
      could use Quad3 face tessellation, but would require moving Q3's subdivision into utils ns to avoid circular dependency.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PTessellate
  (tessellate
   ([_] (g/tessellate _ {}))
   ([_ {f :fn :or {f gu/tessellate-3} :as opts}]
      (->> (if (some #{:num :cols :rows :slices} (keys opts))
             (g/subdivide _ opts)
             [_])
           (sequence
            (comp
             (mapcat g/faces)
             (mapcat f))))))
#+END_SRC

*** Transformations                                                  :verify:

#+BEGIN_SRC clojure :noweb-ref impl
  g/PRotate
  (rotate
   [_ theta] (g/rotate-z (cu/cuboid (:p _) (:size _)) theta))
  
  g/PRotate3D
  (rotate-x
   [_ theta] (g/rotate-x (cu/cuboid (:p _) (:size _)) theta))
  (rotate-y
   [_ theta] (g/rotate-y (cu/cuboid (:p _) (:size _)) theta))
  (rotate-z
   [_ theta] (g/rotate-z (cu/cuboid (:p _) (:size _)) theta))
  (rotate-around-axis
   [_ axis theta] (g/rotate-around-axis (cu/cuboid (:p _) (:size _)) axis theta))
  
  g/PScale
  (scale
   ([_ s] (thi.ng.geom.types.AABB. (g/* (:p _) s) (g/* (:size _) s)))
   ([_ sx sy] (thi.ng.geom.types.AABB. (g/* (:p _) sx sy) (g/* (:size _) sx sy)))
   ([_ sx sy sz] (thi.ng.geom.types.AABB. (g/* (:p _) sx sy sz) (g/* (:size _) sx sy sz))))
  (scale-size
   [_ s]
   (let [s' (g/* (:size _) s)]
     (thi.ng.geom.types.AABB. (g/madd (g/- s' (:size _)) -0.5 (:p _)) s')))
  
  g/PTranslate
  (translate
   [_ t] (thi.ng.geom.types.AABB. (g/+ (:p _) t) (:size _)))
  
  g/PTransform
  (transform
   [_ m] (g/transform (cu/cuboid (:p _) (:size _)) m))
#+END_SRC

*** PVolume

#+BEGIN_SRC clojure :noweb-ref impl
  g/PVolume
  (volume [{[w h d] :size}] (mm/mul w h d))
#+END_SRC

*** End of implementation                                          :noexport:

#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/aabb.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.aabb
    #?(:cljs
       (:require-macros
        [thi.ng.math.macros :as mm]))
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.intersect :as isec]
     [thi.ng.geom.core.vector :as v :refer [vec3]]
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.cuboid :as cu]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.geom.types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.dstruct.core :as d]
     [thi.ng.xerror.core :as err]
     [thi.ng.math.core :as m :refer [*eps*]]
     #?(:clj [thi.ng.math.macros :as mm])))

  <<ctors>>

  <<helpers>>

  <<impl>>
#+END_SRC

** Tests
*** TODO add rotate tests
*** TODO add isec tests

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/geom/types/test/aabb.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.types.test.aabb
    #?(:cljs
       (:require-macros
        [cemerick.cljs.test :refer (is deftest with-test run-tests testing)]))
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.vector :refer [vec3]]
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.geom.aabb :as a]
     [thi.ng.geom.cuboid :as cu]
     [thi.ng.geom.sphere :as s]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.geom.triangle :as t]
     #?(:clj
        [clojure.test :refer :all]
        :cljs
        [cemerick.cljs.test])))

  (deftest test-ctors
    (is (= (a/aabb [100 200 300] [10 20 30])
           (a/aabb-from-minmax [100 200 300] [110 220 330]))
        "aabb-from-minmax")
    (is (= (a/aabb [0 0 0] [10 10 10]) (a/aabb 10))
        "aabb n")
    (is (= (a/aabb [0 0 0] [10 20 30]) (a/aabb 10 20 30))
        "aabb sz sy sz"))

  (deftest test-impls
    (let [[px py pz :as p] (vec3 100 200 300)
          [w h d :as s]    (vec3 10 20 30)
          [qx qy qz :as q] (g/+ p s)
          c (g/madd s 0.5 p)
          a (a/aabb p s)]
      (is (== (* 2 (+ (* w h) (* w d) (* h d))) (g/area a)) "area")
      (is (== (* w h d) (g/volume a)) "volume")
      (is (= a (g/bounds a)) "bounds")
      (is (= w (g/width a)) "width")
      (is (= h (g/height a)) "height")
      (is (= d (g/depth a)) "depth")
      (is (= (s/sphere c (g/dist c (g/+ p s))) (g/bounding-sphere a)) "bounding sphere")
      (is (= c (g/centroid a)) "centroid")
      (is (= (vec3) (g/centroid (g/center a))) "center + centroid")
      (is (= (vec3 -1 -2 -3) (g/centroid (g/center a (vec3 -1 -2 -3)))) "center p + centroid")
      (is (= 8 (count (g/vertices a))) "vert count")
      (is (= 6 (count (g/faces a))) "face count")
      (is (= 12 (count (g/edges a))) "edge count")
      (is (instance? thi.ng.geom.types.BasicMesh (g/as-mesh a)) "as bmesh")
      (is (instance? thi.ng.geom.types.GMesh (g/as-mesh a {:mesh (gm/gmesh)})) "as gmesh")
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :n})))))
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :s})))))
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :e})))))
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :w})))))
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :f})))))
      (is (= 1 (count (g/faces (g/as-mesh a {:flags :b})))))
      (is (every? #(g/contains-point? a %)
                  (take 1000 (repeatedly #(g/random-point-inside a))))
          "random-p-inside contains")
      (is (every? pos?
                  (take 1000 (repeatedly #(g/classify-point a (g/random-point-inside a)))))
          "random-p-inside classify")
      (is (every? zero?
                  (take 1000 (repeatedly #(g/classify-point a (g/random-point a)))))
          "random-p classify on surface")
      (is (= 27 (count (g/subdivide a {:num 3}))) "subdiv :num")
      (is (= 6 (count (g/subdivide a {:cols 3 :rows 2}))) "subdiv :cols :rows")
      (is (= 12 (count (g/subdivide a {:cols 3 :rows 2 :slices 2}))) "subdiv :cols :rows :slices")
      (is (= 12 (count (g/tessellate a))) "tessellate")
      (is (= (a/aabb s) (g/translate a (g/- p))) "translate")
      (is (= (a/aabb (g/* p 2) (g/* s 2)) (g/scale a 2)) "scale")
      (is (= (a/aabb (g/madd s -0.5 p) (g/* s 2)) (g/scale-size a 2)) "scale-size")
      (is (= (cu/cuboid (vec3) s) (g/transform a (g/translate M44 (g/- p)))) "translate via mat")
      (is (= (cu/cuboid (g/* p 2) (g/* s 2)) (g/transform a (g/scale M44 2))) "scale via mat")
      (is (= (a/aabb [-1 -2 -3] [3 5 7]) (g/union (a/aabb [-1 -2 -3] 1) (a/aabb [1 2 3] 1))) "union")
      (is (= (a/aabb) (g/union (a/aabb) (a/aabb))) "union self")
      (is (= (a/aabb 0.5 0.5) (g/intersection (a/aabb) (a/aabb 0.5 1))) "intersection aabb 1")
      (is (= (a/aabb 1 0) (g/intersection (a/aabb) (a/aabb 1 1))) "intersection aabb 2")
      (is (= (vec3) (g/map-point a p)) "map-point 1")
      (is (= (vec3 1) (g/map-point a q)) "map-point 2")
      (is (= (vec3 0 1 1) (g/map-point a (vec3 px qy qz))) "map-point 3")
      (is (= (vec3 1 0 1) (g/map-point a (vec3 qx py qz))) "map-point 4")
      (is (= (vec3 1 1 0) (g/map-point a (vec3 qx qy pz))) "map-point 5")
      (is (= (vec3 0.5) (g/map-point a (g/centroid a))) "map-point centroid")
      (is (= p (g/unmap-point a (vec3))) "unmap-point 1")
      (is (= q (g/unmap-point a (vec3 1))) "unmap-point 2")
      (is (= c (g/unmap-point a (vec3 0.5))) "unmap-point 3")
      ))
#+END_SRC
