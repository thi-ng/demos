#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeombasicmesh][thi.ng.geom.basicmesh]]
     - [[#helper-functions][Helper functions]]
     - [[#constructors][Constructors]]
     - [[#protocol-implementations][Protocol implementations]]
         - [[#parea][PArea]]
         - [[#todo-pboundary][TODO PBoundary]]
         - [[#pbounds][PBounds]]
         - [[#pboundingsphere][PBoundingSphere]]
         - [[#pcenter][PCenter]]
         - [[#pflip][PFlip]]
         - [[#pvertexaccess-pedgeaccess--pfaceaccess][PVertexAccess, PEdgeAccess & PFaceAccess]]
         - [[#pnormalaccess][PNormalAccess]]
         - [[#pgeomcontainer][PGeomContainer]]
         - [[#pmeshconvert][PMeshConvert]]
         - [[#ptessellate][PTessellate]]
         - [[#ptransform][PTransform]]
         - [[#pvolume][PVolume]]
         - [[#end-of-implementation][End of implementation]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* thi.ng.geom.basicmesh

** Helper functions

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn add-face
    [mesh f]
    (thi.ng.geom.types.BasicMesh.
     (into (:vertices mesh) f)
     (conj (:faces mesh) f)
     (:fnormals mesh)
     (:attribs mesh)))
#+END_SRC

** Constructors

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn basic-mesh
    "Builds a new 3d mesh data structure and (optionally) populates it with
    the given items (a seq of existing meshes and/or faces). Faces are defined
    as vectors of their vertices."
    [] (thi.ng.geom.types.BasicMesh. #{} #{} {} {}))
#+END_SRC

** Protocol implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.BasicMesh
#+END_SRC

*** PArea

#+BEGIN_SRC clojure :noweb-ref impl
  g/PArea
  (area
   [_] (gu/total-area-3d (:faces _)))
#+END_SRC

*** TODO PBoundary

#+BEGIN_SRC clojure :noweb-ref impl

#+END_SRC

*** PBounds

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBounds
  (bounds [_] (tu/bounding-box (seq (:vertices _))))
  (width [_]  (gu/axis-range 0 (:vertices _)))
  (height [_] (gu/axis-range 1 (:vertices _)))
  (depth [_]  (gu/axis-range 2 (:vertices _)))
#+END_SRC

*** PBoundingSphere

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundingSphere
  (bounding-sphere
   [_] (tu/bounding-sphere (g/centroid _) (:vertices _)))
#+END_SRC

*** PCenter

#+BEGIN_SRC clojure :noweb-ref impl
  g/PCenter
  (center
   ([_]   (g/center _ (vec3)))
   ([_ o] (g/transform _ (g/translate M44 (g/- o (g/centroid _))))))
  (centroid
   [_]    (gu/centroid (seq (:vertices _))))
#+END_SRC

*** PFlip

#+BEGIN_SRC clojure :noweb-ref impl
  g/PFlip
  (flip [_] (tu/map-mesh (fn [f] [(vec (rseq f))]) _))
#+END_SRC

*** PVertexAccess, PEdgeAccess & PFaceAccess

#+BEGIN_SRC clojure :noweb-ref impl
  g/PVertexAccess
  (vertices
   [_] (:vertices _))
  g/PEdgeAccess
  (edges
   [_]
   (into
    #{}
    (comp
     (mapcat #(d/successive-nth 2 (conj % (first %))))
     (map set))
    (:faces _)))
  g/PFaceAccess
  (faces
   [_] (:faces _))
  (add-face
   [_ f] (add-face _ f))
  (vertex-faces
   [_ v] (filter
          #(>= #?(:clj (.indexOf ^clojure.lang.PersistentVector % v) :cljs (d/index-of % v)) 0)
          (:faces _)))
  (remove-face
   [_ f]
   (err/unsupported!))
#+END_SRC

*** PNormalAccess

#+BEGIN_SRC clojure :noweb-ref impl
  g/PNormalAccess
  (face-normals
   [_ force?] (if (seq (:fnormals _)) (:fnormals _) (if force? (:fnormals (g/compute-face-normals _)))))
  (face-normal
   [_ f] ((:fnormals _) f))
  (vertex-normals
   [_ force?] (if force? (err/unsupported!)))
  (vertex-normal
   [_ v] (err/unsupported!))
  (compute-face-normals
   [_]
   (loop [fnorms (transient {}), faces (:faces _)]
     (if faces
       (let [f (first faces)]
         (recur (assoc! fnorms f (gu/ortho-normal f)) (next faces)))
       (assoc _ :fnormals (persistent! fnorms)))))
  (compute-vertex-normals
   [_] (err/unsupported!))
#+END_SRC

*** PGeomContainer

#+BEGIN_SRC clojure :noweb-ref impl
  g/PGeomContainer
  (into
   [_ faces] (tu/into-mesh _ add-face faces))
  g/PClear
  (clear*
   [_] (basic-mesh))
#+END_SRC

*** PMeshConvert

#+BEGIN_SRC clojure :noweb-ref impl
  g/PMeshConvert
  (as-mesh
   ([_] _)
   ([_ opts] (g/into (:mesh opts) (:faces _))))
#+END_SRC

*** PTessellate

#+BEGIN_SRC clojure :noweb-ref impl
  g/PTessellate
  (tessellate
   ([_]      (g/tessellate _ {}))
   ([_ opts] (tu/map-mesh (or (:fn opts) gu/tessellate-with-first) _)))
#+END_SRC

*** PTransform

#+BEGIN_SRC clojure :noweb-ref impl
  g/PScale
  (scale
   ([_ s]
      (tu/transform-mesh _ add-face #(g/* % s)))
   ([_ sx sy sz]
      (tu/transform-mesh _ add-face #(g/* % sx sy sz))))
  (scale-size
   [_ s]
   (let [c (g/centroid _)]
     (tu/transform-mesh _ add-face #(g/madd (g/- % c) s c))))
  g/PTranslate
  (translate
   [_ t] (tu/transform-mesh _ add-face #(g/+ % t)))
  g/PTransform
  (transform
   [_ m]
   (tu/transform-mesh _ add-face m))
#+END_SRC

*** PVolume

#+BEGIN_SRC clojure :noweb-ref impl
  g/PVolume
  (volume
   [_] (gu/total-volume (:faces _)))
#+END_SRC

*** End of implementation                                          :noexport:
#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/basicmesh.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.basicmesh
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.types :as types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.dstruct.core :as d]
     [thi.ng.math.core :as m :refer [*eps*]]
     [thi.ng.xerror.core :as err]
     [clojure.core.reducers :as r]))

  (declare basic-mesh)

  <<helpers>>

  <<ctors>>

  <<impl>>
#+END_SRC
