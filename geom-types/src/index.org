#+SETUPFILE: ../../src/setup.org
#+TITLE: thi.ng/geom-types

* About the project

** Overview

This is a sub-project of [[file:../../src/index.org][thi.ng/geom]]. It contains a large collection
of 2D/3D geometric entities, each implementing a large number of
[[file:../../geom-core/src/core.org][core protocols]].

*** Geometric entities

| *2D*           | *3D*                      |
|----------------+---------------------------|
| Line2          | Line3                     |
| LineStrip2     | LineStrip3 (TBD)          |
| Bezier2        | Bezier3 (TBD)             |
| Circle2        | Circle3 (TBD)             |
|                | Sphere                    |
| Ellipse2 (TBD) | Ellipsoid (TBD)           |
| Rect2          | AABB                      |
| Quad2 (TBD)    | Quad3                     |
|                | Tetrahedron               |
| Triangle2      | Triangle3                 |
| Polygon2       | Polygon3 (TBD)            |
| Path2          | Path3 (TBD)               |
|                | Plane                     |
|                | GMesh                     |

Once the protocol API is finalized an overview table/graph will show
which types implement which protocols. For now please consult the
source code to see which operations are supported.

*** Geometry operations

In addition to these types, this module also implements these common
operations:

- Automatic spline generation from set of points
- Basic SVG path parsing
- 2D Delaunay triangulation
- 2D convex hull
- Shape extrusion as solid or walled mesh
- Tesselation of simple 2D polygons
- Insetting of simple 2D polygons & 3D convex/planar quads
- Sutherland-Hodgeman clipping of 2D polygons
- Entity area, circumference & volume calculations
- Entity intersection checks (vs. line, ray, shape)
- Entity to mesh conversion (w/ many options)
- Access entities as graph-like structures (vertices/edges)
- Entity sampling (at fixed resolution or uniform distance)
- Entity subdivision (only lines, rects, quads, tetrahedrons)
- Subdivision meshes (Catmull-Clark, Doo-Sabin, Butterfly)
- 3D Boolean/CSG operations on meshes (union, difference, intersection)
- 3D geometry export (PLY, STL, OBJ, OFF formats)

** Status

ALPHA quality, in active development.

* Namespaces

- [[./aabb.org][thi.ng.geom.aabb]]
- [[./basicmesh.org][thi.ng.geom.basicmesh]]
- [[./bezier.org][thi.ng.geom.bezier]]
- [[./circle.org][thi.ng.geom.circle]]
- [[./cuboid.org][thi.ng.geom.cuboid]]
- [[./gmesh.org][thi.ng.geom.gmesh]]
- [[./line.org][thi.ng.geom.line]]
- [[./path.org][thi.ng.geom.path]]
- [[./plane.org][thi.ng.geom.plane]]
- [[./polygon.org][thi.ng.geom.polygon]]
- [[./quad.org][thi.ng.geom.quad]]
- [[./rect.org][thi.ng.geom.rect]]
- [[./spatialtree.org][thi.ng.geom.spatialtree]]
- [[./sphere.org][thi.ng.geom.sphere]]
- [[./tetrahedron.org][thi.ng.geom.tetrahedron]]
- [[./triangle.org][thi.ng.geom.triangle]]
- [[./types.org][thi.ng.geom.types]]
- [[./utils.org][thi.ng.geom.types.utils]]
- [[./ptf.org][thi.ng.geom.types.utils.ptf]]

* Tests

- [[../test/protocols.org][thi.ng.geom.types.test.protocols]]

* Module definition

** Building & testing this project

Please see the [[file:../../src/index.org][parent project]] for further information.

** Injected properties                                             :noexport:

This template uses shared project configuration defined in [[../../src/config.org][config.org]].
Module specific settings are defined below:

#+BEGIN_SRC clojure :exports none :noweb-ref project-name
thi.ng/geom-types
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/geom-types-<<conf-version()>>.js
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "thi.ng geometry kit - types module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url  "<<conf-project-url>>"}

    :min-lein-version "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-cljs>>
                   [thi.ng/geom-core "<<conf-version()>>"]
                   <<dep-xerror>>]

    :profiles     {:dev {:dependencies [<<dep-criterium>>]
                         :plugins      [<<dep-cljsbuild>>
                                        <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljsbuild    {:builds [{:source-paths ["src" "test"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.geom.types.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.geom.types.version)
  
  (prn version)
  ; "<<conf-version()>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/types/version.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.types.version)
  (def version "<<conf-version()>>")
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |

