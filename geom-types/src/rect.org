#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeomrect][thi.ng.geom.rect]]
     - [[#constructor][Constructor]]
     - [[#type-specific-functions][Type specific functions]]
     - [[#protocol-implementations][Protocol implementations]]
         - [[#parea][PArea]]
         - [[#pboundary][PBoundary]]
         - [[#pbounds][PBounds]]
         - [[#pboundingcircle][PBoundingCircle]]
         - [[#pcenter][PCenter]]
         - [[#pcircumference][PCircumference]]
         - [[#pclassify][PClassify]]
         - [[#pextrude][PExtrude]]
         - [[#pgraph][PGraph]]
         - [[#pintersect][PIntersect]]
         - [[#pmeshconvert][PMeshConvert]]
         - [[#ppointmap][PPointMap]]
         - [[#ppolygonconvert][PPolygonConvert]]
         - [[#pproximity][PProximity]]
         - [[#psample][PSample]]
         - [[#todo-psetops][TODO PSetOps]]
         - [[#psubdivide][PSubdivide]]
         - [[#ptessellate][PTessellate]]
         - [[#todo-ptransform][TODO PTransform]]
         - [[#pvolume][PVolume]]
         - [[#end-of-implementations][End of implementations]]
     - [[#namespace-declaration][Namespace declaration]]

* thi.ng.geom.rect

** Constructor

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn rect
    ([] (thi.ng.geom.types.Rect2. (vec2) (vec2 1.0)))
    ([w] (thi.ng.geom.types.Rect2. (vec2) (vec2 w)))
    ([p q]
       (if (coll? p)
         (if (coll? q)
           (let [p (vec2 p) q (vec2 q)
                 [p q] [(g/min p q) (g/max p q)]]
             (thi.ng.geom.types.Rect2. p (g/- q p)))
           (thi.ng.geom.types.Rect2. (vec2 p) (vec2 q)))
         (thi.ng.geom.types.Rect2. (vec2) (vec2 p q))))
    ([x y w]
       (if (number? x)
         (thi.ng.geom.types.Rect2. (vec2 x y) (vec2 w))
         (thi.ng.geom.types.Rect2. (vec2 x) (vec2 y w))))
    ([x y w h] (thi.ng.geom.types.Rect2. (vec2 x y) (vec2 w h))))
#+END_SRC

** Type specific functions

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn union
    [{p :p [w h] :size} {q :p [qw qh] :size}]
    (let [[x1 y1 :as p'] (g/min p q)
          x2 (max (+ (p 0) w) (+ (q 0) qw))
          y2 (max (+ (p 1) h) (+ (q 1) qh))
          w (- x2 x1)
          h (- y2 y1)]
      (thi.ng.geom.types.Rect2. p' (vec2 w h))))

  (defn left [r] ((:p r) 0))
  (defn right [r] (+ ((:p r) 0) ((:size r) 0)))
  (defn bottom [r] ((:p r) 1))
  (defn bottom-left [r] (:p r))
  (defn top [r] (+ ((:p r) 1) ((:size r) 1)))
  (defn top-right [r] (g/+ (:p r) (:size r)))
#+END_SRC

** Protocol implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.Rect2
#+END_SRC

*** PArea

#+BEGIN_SRC clojure :noweb-ref impl
  g/PArea
  (area [_] (reduce * (:size _)))
#+END_SRC

*** PBoundary

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundary
  (contains-point?
   [{[px py] :p [w h] :size} [x y]]
   (and (m/in-range? 0.0 w (- x px)) (m/in-range? 0.0 h (- y py))))
#+END_SRC

*** PBounds

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBounds
  (bounds[_] _)
  (width  [_] ((:size _) 0))
  (height [_] ((:size _) 1))
  (depth  [_] 0)
#+END_SRC

*** PBoundingCircle

#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundingCircle
  (bounding-circle
   [_]
   (let [c (g/centroid _)]
     (tu/bounding-circle c (g/dist c (:p _)))))
#+END_SRC

*** PCenter

#+BEGIN_SRC clojure :noweb-ref impl
  g/PCenter
  (center
   ([{s :size}]
      (thi.ng.geom.types.Rect2. (g/* s -0.5) s))
   ([{s :size} o]
      (thi.ng.geom.types.Rect2. (g/madd s -0.5 o) s)))
  (centroid
   [_] (g/madd (:size _) 0.5 (:p _)))
#+END_SRC

*** PCircumference

#+BEGIN_SRC clojure :noweb-ref impl
  g/PCircumference
  (circumference [_] (* 2.0 (reduce + (:size _))))
#+END_SRC

*** PClassify

#+BEGIN_SRC clojure :noweb-ref impl
  g/PClassify
  (classify-point
   [_ q]
   (transduce
    (map #(m/signum (apply gu/closest-point-coeff q %) *eps*))
    min
    (g/edges _)))
#+END_SRC

*** PExtrude                                                         :verify:

Extruding a rectangle along the Z-axis results in a 3D mesh
implementation. The =extrude= function supports the following
options, given as parameter map:

| Key       | Description                             | Default |
|-----------+-----------------------------------------+---------|
| =:depth=  | extrusion depth along positive Z        |     1.0 |
| =:scale=  | scale factor of rect at extrusion depth |     1.0 |
| =:offset= | extrusion vector (overrides :depth)     |     nil |

The process results in bevelled forms for =:scale= values other
than 1.0.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PExtrude
  (extrude
   [_ {:keys [depth scale offset] :or {depth 1.0 scale 1.0} :as opts}]
   (if (and (== scale 1.0) (nil? offset))
     (g/as-mesh
      (thi.ng.geom.types.AABB. (vec3 (:p _)) (conj (:size _) depth)) (:mesh opts))
     (g/extrude (g/as-polygon _) opts)))
  (extrude-shell
   [_ opts] (g/extrude-shell (g/as-polygon _) opts))
#+END_SRC

*** PGraph

#+BEGIN_SRC clojure :noweb-ref impl
  g/PVertexAccess
  (vertices
   [_]
   (let [a (:p _)
         c (g/+ a (:size _))]
     [a (vec2 (c 0) (a 1)) c (vec2 (a 0) (c 1))]))
  g/PEdgeAccess
  (edges
   [_] (let [a (:p _)
             c (g/+ a (:size _))
             b (vec2 (c 0) (a 1))
             d (vec2 (a 0) (c 1))]
         [[a b] [b c] [c d] [d a]]))
  g/PGraph
  (vertex-neighbors
   [_ v] (d/neighbors (vec2 v) (g/vertices _)))
  (vertex-valence
   [_ v] (if ((set (g/vertices _)) (vec2 v)) 2 0))
#+END_SRC

*** PIntersect

#+BEGIN_SRC clojure :noweb-ref impl
  g/PIntersect
  (intersect-line
   [_ {[p q] :points}]
   (if (and (g/contains-point? _ p) (g/contains-point? _ q))
     {:type :coincident}
     (isec/intersect-line2-edges? p q (g/edges _))))
  (intersect-ray
   ([_ ray]
    (let [[p dir] (if (map? ray) [(:p ray) (:dir ray)] ray)]
      (isec/intersect-ray2-edges? p dir (g/edges _))))
   ([_ p dir]
    (isec/intersect-ray2-edges? p dir (g/edges _))))
  (intersect-shape
   [_ s]
   (cond
     (instance? thi.ng.geom.types.Line2 s) (g/intersect-line _ s)
     (instance? thi.ng.geom.types.Rect2 s) (isec/intersect-rect-rect? _ s)
     (instance? thi.ng.geom.types.Circle2 s) (isec/intersect-aabb-sphere? _ s)
     :default (err/unsupported! (str "can't intersect w/ " s))))
#+END_SRC

*** PMeshConvert                                                     :verify:

#+BEGIN_SRC clojure :noweb-ref impl
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([_ opts]
      (g/add-face
       (or (:mesh opts) (bm/basic-mesh))
       (mapv vec3 (g/vertices _)))))
#+END_SRC

*** PPointMap

- =map-point= takes a rect and 2D point, returns the point in
  normalized UV coords in local rect space, where [0,0] is equivalent
  to the rect's min point and [1,1] the point diagonally opposite. If
  any of the resulting coordinates is outside the 0.0 .. 1.0 interval,
  the orginal point was outside the rectangle.

- =unmap-point= is the inverse operation of =map-point=. It maps a
  point in local UV coordinates to its world position.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PPointMap
  (map-point
   [{:keys [p size]} q]
   (vec2
    (mm/subdiv (q 0) (p 0) (size 0))
    (mm/subdiv (q 1) (p 1) (size 1))))
  (unmap-point
   [_ q] (g/madd q (:size _) (:p _)))
#+END_SRC

*** PPolygonConvert

#+BEGIN_SRC clojure :noweb-ref impl
  g/PPolygonConvert
  (as-polygon
   [_] (thi.ng.geom.types.Polygon2. (g/vertices _)))
#+END_SRC

*** PProximity

#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-proxi>>
#+END_SRC

*** PSample

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSample
  (point-at
   [_ t] (gu/point-at t (conj (g/vertices _) (:p _))))
  (random-point
   [_] (g/point-at _ (m/random)))
  (random-point-inside
   [_] (g/+ (:p _) (m/random ((:size _) 0)) (m/random ((:size _) 1))))
  (sample-uniform
   [_ udist include-last?]
   (gu/sample-uniform udist include-last? (conj (g/vertices _) (:p _))))
#+END_SRC

*** TODO PSetOps
    - Note taken on [2015-03-15 Sun 01:31] \\
      same as for PSetOps impl for AABB: consider only impls for ops retaining type

The implementations for this protocol are only intended to work with
other rects and no type checking is done.

- =union= returns the union rect of both args
- =intersection= (still missing) returns the rect of the intersection
  area of both args or =nil= if there's no overlap. Intersection is
  defined also for touching rects or if overlap is only a single point
  (in which case the size of the resulting rect will be zero)
- =difference= (still missing) will return a polygon of the remaining
  area after the 2nd rect has been subtracted from the first (or
  =nil= in case of no overlap)

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSetOps
  (union
   [{pa :p sa :size} {pb :p sb :size}]
    (let [p (g/min pa pb)]
      (thi.ng.geom.types.Rect2. p (g/- (g/max (g/+ pa sa) (g/+ pb sb)) p))))
  (intersection
   [_ r]
   (let [pa (:p _) qa (g/+ pa (:size _))
         pb (:p r) qb (g/+ pb (:size r))
         p' (g/max pa pb)
         q' (g/min qa qb)
         s  (g/- q' p')]
     (if (every? #(>= % 0) s)
       (thi.ng.geom.types.Rect2. p' s))))
#+END_SRC
  
*** PSubdivide

A rectangle can be subdivided into smaller ones, i.e. to create a
list of uniform grid cells. The following options can be given as
a 2nd argument map:

| Key     | Description                                                    | Default |
|---------+----------------------------------------------------------------+---------|
| =:num=  | number of cols/rows the rect will be uniformly subdivided into |       2 |
| =:cols= | number of times the rect will be subdivided along the X-axis   |       2 |
| =:rows= | number of times the rect will be subdivided along the Y-axis   |       2 |

When =:num= is given, the resulting rects will retain the aspect
ratio of the original rect. If specified, =:cols= and =:rows= will
take precedence over =:num=, but the latter will be used as
default for missing args. Rects are returned as a lazyseq with
top-left to bottom-right ordering and inner sorting along X.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSubdivide
  (subdivide
   ([_] (g/subdivide _ {}))
   ([_ {:keys [num cols rows] :or {num 2}}]
      (let [dx (/ 1.0 (or cols num))
            dy (/ 1.0 (or rows num))
            rx (range 0.0 1.0 dx)
            ry (range 0.0 1.0 dy)
            s (g/* (:size _) dx dy)]
        (for [y ry x rx
              :let [[px py] (g/unmap-point _ (vec2 x y))
                    px (m/roundto px *eps*)
                    py (m/roundto py *eps*)]]
          (thi.ng.geom.types.Rect2. (vec2 px py) s)))))
#+END_SRC

*** PTessellate

A rectangle can be tessellated into a number of triangles. When
called without options map as 2nd argument, the rect will be split
into 2 triangles, each in anti-clockwise orientation: =[tl br tr]=
& =[tl bl br]=. When called *with* options, then these are used
for a call to [[PSubdivide][=subdivide=]] first and the function returns a lazyseq
of triangles of the subdivided rects.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PTessellate
  (tessellate
   ([_]
    (let [[a b c d] (g/vertices _)]
      [(thi.ng.geom.types.Triangle2. [a b c])
       (thi.ng.geom.types.Triangle2. [a c d])]))
   ([_ {tess-fn :fn :or {tess-fn gu/tessellate-3} :as opts}]
    (->> (g/subdivide _ opts)
         (sequence
          (comp
           (mapcat #(tess-fn (g/vertices %)))
           (map #(thi.ng.geom.types.Triangle2. %)))))))
#+END_SRC
*** TODO PTransform

#+BEGIN_SRC clojure :noweb-ref impl
  g/PRotate
  (rotate
   [_ m] (g/rotate (g/as-polygon _) m))

  g/PScale
  (scale
   ([_ s]
      (thi.ng.geom.types.Rect2.
       (g/* (:p _) s) (g/* (:size _) s)))
   ([_ a b]
      (thi.ng.geom.types.Rect2.
       (g/* (:p _) a b) (g/* (:size _) a b))))
  (scale-size
   [_ s]
   (let [s' (g/* (:size _) s)]
     (thi.ng.geom.types.Rect2.
      (g/madd s' -0.5 (g/centroid _)) s')))

  g/PTranslate
  (translate
   [_ t] (thi.ng.geom.types.Rect2. (g/+ (:p _) t) (:size _)))

  g/PTransform
  (transform
   [_ m] (g/transform (g/as-polygon _) m))
#+END_SRC

*** PVolume                                                     :usetemplate:

#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-zerovol>>
#+END_SRC

*** End of implementations                                         :noexport:

#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/rect.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.rect
    #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.intersect :as isec]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     [thi.ng.geom.aabb :as a]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.geom.types :as types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.dstruct.core :as d]
     [thi.ng.xerror.core :as err]
     [thi.ng.math.core :as m :refer [*eps*]]
     #?(:clj [thi.ng.math.macros :as mm]))
    #?(:clj
       (:import
        [thi.ng.geom.types Circle2 Polygon2 Rect2])))

  <<ctors>>

  <<helpers>>

  <<impl>>
#+END_SRC
