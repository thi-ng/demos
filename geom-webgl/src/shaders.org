#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_3_gh:
 - [[#thinggeomwebglshaders][thi.ng.geom.webgl.shaders]]
     - [[#todo-shader-specs][TODO Shader specs]]
     - [[#shader-uniforms][Shader uniforms]]
         - [[#supported-types][Supported types]]
         - [[#todo-uniform-setup--handling][TODO Uniform setup & handling]]
     - [[#shader-attributes][Shader attributes]]
     - [[#shader-creation][Shader creation]]
         - [[#header-injection][Header injection]]
         - [[#creation-compilation--linking][Creation, compilation & linking]]
     - [[#shader-usage][Shader usage]]
     - [[#shading-state-preparation][Shading state preparation]]
     - [[#helpers][Helpers]]
     - [[#complete-namespace-definition][Complete namespace definition]]
     - [[#presets][Presets]]
         - [[#basic][Basic]]
         - [[#lambert][Lambert]]
         - [[#phong][Phong]]
         - [[#x-ray][X-Ray]]
         - [[#spotlight][Spotlight]]
         - [[#shadow][Shadow]]
         - [[#2d-overlay][2D Overlay]]

* thi.ng.geom.webgl.shaders

** TODO Shader specs

** Shader uniforms

*** Supported types

#+BEGIN_SRC clojure :noweb-ref uniforms
  (def uniform-types
    {:float       ["1fv" arrays/float32]
     :int         ["1iv" arrays/int32]
     :vec2        ["2fv" arrays/float32]
     :vec3        ["3fv" arrays/float32]
     :vec4        ["4fv" arrays/float32]
     :ivec2       ["2iv" arrays/int32]
     :ivec3       ["3iv" arrays/int32]
     :ivec4       ["4iv" arrays/int32]
     :bool        ["1iv" arrays/int32]
     :bvec2       ["2iv" arrays/int32]
     :bvec3       ["3iv" arrays/int32]
     :bvec4       ["4iv" arrays/int32]
     :mat2        ["Matrix2fv" arrays/float32]
     :mat3        ["Matrix3fv" arrays/float32]
     :mat4        ["Matrix4fv" arrays/float32]
     :sampler2D   ["1iv" arrays/int32]
     :samplerCube ["1iv" arrays/int32]})

#+END_SRC

*** TODO Uniform setup & handling

Shader specs define uniforms as a map under the =:uniforms= key. In
this map, each of the shader's uniform names must be stated as keys
and their types as values. Default values can be given by using a
vector of =[type default]=. Default values are only used when a user
doesn't specify a uniform in her model spec when drawing geometry. The
example below defines default values for the =:ambient=, =:model= and
=:texture= uniforms:

#+BEGIN_SRC clojure
  :uniforms {:alpha    :float
             :diffuse  :vec3
             :ambient  [:vec3 [0.1 0.1 0.1]]
             :texture  [:sampler2D 0]
             :modelMat [:mat4 M44]
             :viewMat  :mat4
             :projMat  :mat4}
#+END_SRC

Special cases:

- Setters for =:vec3= uniforms expect a 3-element vector or an
  integer. If the latter, it is interpreted as 24bit RGB value and
  converted into a normalized RGB vector (=[r g b]=)
- Values for Matrix uniforms can be specified as vector =[mat default transpose?]=
  to indicate given matrix should be transposed

#+BEGIN_SRC clojure :noweb-ref uniforms
  (defn init-shader-uniforms
    [^WebGLRenderingContext gl prog uniforms]
    (reduce
     (fn [umap [id type]]
       (let [loc (.getUniformLocation gl prog (name id))
             [type default transpose?] (if (sequential? type) type [type])
             transpose? (boolean transpose?)
             [u-type u-cast] (uniform-types type)
             setter (aget gl (str "uniform" u-type))]
         ;; TODO add check if valid uniform
         (assoc umap id
                {:type type
                 :default default
                 :setter (cond
                           (#{:mat2 :mat3 :mat4} type)
                           (fn [x]
                             (.call setter gl loc transpose?
                                    (if (arrays/typed-array? x)
                                      x (u-cast x))))
                           (= :vec3 type)
                           (fn [x]
                             (if (number? x)
                               (.call setter gl loc (-> x col/int24 col/as-rgba deref (subvec 0 3) u-cast))
                               (.call setter gl loc (if (arrays/typed-array? x) x (u-cast x)))))
                           :else
                           (fn [x]
                             (.call setter gl loc
                                    (if (arrays/typed-array? x)
                                      x (u-cast (if (not (sequential? x)) [x] x))))))
                 :loc loc})))
     {} uniforms))

  (defn set-uniform
    [shader id val]
    (if-let [u-spec (get-in shader [:uniforms id])]
      ((:setter u-spec) val)
      (warn "Unknown shader uniform: " id)))
#+END_SRC

** Shader attributes

#+BEGIN_SRC clojure :noweb-ref attribs
  (defn init-shader-attribs
    [^WebGLRenderingContext gl prog attribs]
    (reduce
     (fn [amap id]
       (assoc amap id (.getAttribLocation gl prog (name id))))
     {} attribs))

  (defn set-attribute
    [^WebGLRenderingContext gl shader id {:keys [buffer stride size type normalized? offset]}]
    (if-let [loc (get-in shader [:attribs id])]
      (doto gl
        (.bindBuffer gl/array-buffer buffer)
        (.enableVertexAttribArray loc)
        (.vertexAttribPointer
         loc
         size
         (or type gl/float)
         (boolean normalized?)
         (or stride 0)
         (or offset 0)))
      (err/illegal-arg! (str "Unknown shader attribute: " id))))

  (defn disable-attribute
    [^WebGLRenderingContext gl shader id]
    (if-let [loc (get-in shader [:attribs id])]
      (do (.disableVertexAttribArray gl loc) gl)
      (err/illegal-arg! (str "Unknown shader attribute: " id))))
#+END_SRC

** Shader creation

*** Header injection

These boilerplate =#define='s are prefixed by default to any given
shader source before compilation with =compile-shader= below.

#+BEGIN_SRC glsl :noweb-ref header
  #ifdef GL_FRAGMENT_PRECISION_HIGH
  precision highp int;
  precision highp float;
  #else
  precision mediump int;
  precision mediump float;
  #endif
  #ifndef PI
  #define PI      3.141592653589793
  #endif
  #ifndef TWO_PI
  #define TWO_PI  6.283185307179586
  #endif
  #ifndef HALF_PI
  #define HALF_PI 1.570796326794896
  #endif
  #ifndef RAD
  #define RAD     0.008726646259972
  #endif
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref ctors :noweb yes
  (def header-prefix
    "
<<header>>
")
#+END_SRC

*** Creation, compilation & linking

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn compile-glsl-vars
    [qualifier coll]
    (->> coll
         (map
          (fn [[id type]]
            (str qualifier " "
                 (name (if (sequential? type) (first type) type)) " "
                 (name id) ";\n")))
         (apply str)))

  (defn parse-and-throw-error
    [^WebGLRenderingContext gl shader src]
    (let [src-lines (vec (str/split-lines src))
          errors (->> shader
                      (.getShaderInfoLog gl)
                      (str/split-lines)
                      (map
                       (fn [line]
                         (let [[_ ln msg] (re-find #"ERROR: \d+:(\d+): (.*)" line)]
                           (when ln
                             (str "line " ln ": " msg "\n"
                                  (src-lines (dec (js/parseInt ln 10))))))))
                      (filter identity)
                      (str/join "\n"))]
      (.deleteShader gl shader)
      (err/throw! (str "Error compiling shader:\n" errors))))

  (defn compile-shader
    [^WebGLRenderingContext gl src type]
    (if-let [shader (.createShader gl type)]
      (do
        (.shaderSource gl shader src)
        (.compileShader gl shader)
        (if (.getShaderParameter gl shader gl/compile-status)
          shader
          (parse-and-throw-error gl shader src)))
      (err/throw! "Can't create shader")))

  (defn make-shader-from-spec
    [^WebGLRenderingContext gl {:keys [vs fs uniforms attribs varying prefix state]}]
    (let [u-src  (compile-glsl-vars "uniform" uniforms)
          a-src  (compile-glsl-vars "attribute" attribs)
          v-src  (compile-glsl-vars "varying" varying)
          prefix (str (or prefix header-prefix) u-src v-src)
          vs     (compile-shader gl (str prefix a-src vs) gl/vertex-shader)
          fs     (compile-shader gl (str prefix fs) gl/fragment-shader)
          prog   (.createProgram gl)]
      (doto gl
        (.attachShader prog vs)
        (.attachShader prog fs)
        (.linkProgram prog))
      (if (.getProgramParameter gl prog gl/link-status)
        (let [uniforms (init-shader-uniforms gl prog uniforms)
              attribs (init-shader-attribs gl prog (keys attribs))]
          (doto gl
            (.deleteShader vs)
            (.deleteShader fs))
          {:program  prog
           :uniforms uniforms
           :attribs  attribs
           :varying  varying
           :state    state})
        (err/throw! (str "Shader failed to link:" (.getProgramInfoLog gl prog))))))

  (defn make-shader-from-dom
    [^WebGLRenderingContext gl {:keys [vs fs] :as spec}]
    (make-shader-from-spec
     gl (assoc spec
          :vs (glu/get-script-text vs)
          :fs (glu/get-script-text fs))))
#+END_SRC

** Shader usage

#+BEGIN_SRC clojure :noweb-ref draw
  (defn apply-default-uniforms
    [shader uniforms]
    (->> (keys uniforms)
         (apply dissoc (:uniforms shader))
         (transduce
          (filter #(:default (val %)))
          (completing #(set-uniform shader (key %2) (:default (val %2))))
          nil)))

  (defn begin-shader
    [^WebGLRenderingContext gl shader uniforms attribs]
    (.useProgram gl (:program shader))
    (apply-default-uniforms shader uniforms)
    (reduce-kv #(set-uniform shader %2 %3) nil uniforms)
    (reduce-kv #(set-attribute gl shader %2 %3) nil attribs))

  (defn end-shader
    [^WebGLRenderingContext gl shader]
    (reduce #(disable-attribute gl shader (key %2)) nil (:attribs shader)))
#+END_SRC

** Shading state preparation

Shader specs can specify WebGL render state flags which can then be
automatically setup using the =prepare-render-state= function below.
Currently the following options are supported:

| *Key*         | *Values*                               | *Description*                  |
|---------------+----------------------------------------+--------------------------------|
| =:depth-test= | boolean                                | enabled if true, else disabled |
| =:blend=      | boolean                                | enabled if true, else disabled |
| =:blend-fn=   | 2-elem vector =[src-coeff dest-coeff]= | only used if =:blend true=     |
|               | [[https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml][reference]]                              |                                |

#+BEGIN_SRC clojure :noweb-ref state
  (defn prepare-render-state
    "Takes a Gl context and shader spec, sets GL render flags stored
    under :state key (only if :state is present)."
    [gl {:keys [state]}]
    (when state
      (if (:depth-test state)
        (gl/enable gl gl/depth-test)
        (gl/disable gl gl/depth-test))
      (if (:blend state)
        (let [[src dest] (or (:blend-fn state) [gl/src-alpha gl/one])]
          (doto gl
            (gl/enable gl/blend)
            (.blendFunc src dest)))
        (gl/disable gl gl/blend)))
    gl)
#+END_SRC

** Helpers

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn compute-normal-matrix
    [m v] (-> v (g/* m) (g/invert) (g/transpose)))

  (defn inject-normal-matrix
    [spec model-mat view-mat normal-mat-id]
    (let [model-mat (if (keyword? model-mat)
                      (-> spec :uniforms model-mat)
                      model-mat)
          view-mat (if (keyword? view-mat)
                      (-> spec :uniforms view-mat)
                      view-mat)]
      (assoc-in
       spec [:uniforms normal-mat-id]
       (compute-normal-matrix model-mat view-mat))))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders.cljs :noweb yes :mkdirp yes :padline no
(ns thi.ng.geom.webgl.shaders
  (:require-macros
    [cljs-log.core :refer [info warn]])
  (:require
    [thi.ng.geom.core :as g]
    [thi.ng.geom.core.matrix]
    [thi.ng.geom.webgl.core :as gl]
    [thi.ng.geom.webgl.utils :as glu]
    [thi.ng.typedarrays.core :as arrays]
    [thi.ng.color.core :as col]
    [thi.ng.xerror.core :as err]
    [clojure.string :as str]))

  <<uniforms>>

  <<attribs>>

  <<ctors>>

  <<draw>>

  <<state>>

  <<helpers>>
#+END_SRC

** Presets
*** Basic

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/basic.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.basic
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]))

  (defn make-shader-spec
    [& [{attr? :color-attrib? is3d? :3d :or {is3d? true}}]]
    (let [spec {:vs       (str "void main(){"
                               (if attr? "vCol=color;")
                               "gl_Position=proj*"
                               (if is3d?
                                 "view*model*vec4(position,1.0)"
                                 "view*model*vec4(position,0.0,1.0)")
                               ";}")
                :fs       (str "void main(){gl_FragColor="
                               (if attr? "vCol" "color")
                               ";}")
                :uniforms {:proj  :mat4
                           :model [:mat4 M44]
                           :view  [:mat4 M44]}
                :attribs  {:position (if is3d? :vec3 :vec2)}}
          spec (if attr?
                 (-> spec
                     (assoc-in [:attribs :color] :vec4)
                     (assoc :varying {:vCol :vec4}))
                 (assoc-in spec [:uniforms :color] :vec4))]
      spec))

  (defn make-shader-spec-2d
    [color-attrib?] (make-shader-spec {:color-attrib? color-attrib? :3d false}))

  (defn make-shader-spec-3d
    [color-attrib?] (make-shader-spec {:color-attrib? color-attrib? :3d true}))
#+END_SRC

*** Lambert

**** Standard shading

#+BEGIN_SRC glsl :noweb-ref lambert-vs
  void main() {
    float lam = lambert(surfaceNormal(normal, normalMat), lightDir);
    vCol = vec4(ambientCol + diffuseCol * lightCol * lam, alpha);
    gl_Position = mvp(position, model, view, proj);
  }
#+END_SRC

**** Two-sided shading

#+BEGIN_SRC glsl :noweb-ref lambert-vs-abs
  void main() {
    float lam = lambertAbs(surfaceNormal(normal, normalMat), lightDir);
    vCol = vec4(ambientCol + diffuseCol * lightCol * lam, alpha);
    gl_Position = mvp(position, model, view, proj);
  }
#+END_SRC

**** Full namespace

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/lambert.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.lambert
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.glsl.vertex :as vertex]
     [thi.ng.glsl.lighting :as light]))

  (defn- make-shader-spec
    [vs-src]
    {:vs (->> vs-src
              (glsl/glsl-spec-plain
               [vertex/mvp vertex/normal light/lambert light/lambert-abs])
              (glsl/assemble))
     :fs "void main(){gl_FragColor=vCol;}"
     :uniforms {:model      [:mat4 M44]
                :view       :mat4
                :proj       :mat4
                :normalMat  :mat4
                :ambientCol [:vec3 [0 0 0]]
                :diffuseCol [:vec3 [1 1 1]]
                :lightCol   [:vec3 [1 1 1]]
                :lightDir   [:vec3 [0 0 1]]
                :alpha      [:float 1]}
     :attribs  {:position   :vec3
                :normal     :vec3}
     :varying  {:vCol       :vec4}
     :state    {:depth-test true}})

  (def shader-spec
    (make-shader-spec
     (glsl/minified "
  <<lambert-vs>>")))

  (def shader-spec-two-sided
    (make-shader-spec
     (glsl/minified "
  <<lambert-vs-abs>>")))

  (defn draw
    [^WebGLRenderingContext gl spec]
    (buf/draw-arrays-with-shader gl (sh/inject-normal-matrix spec :model :view :normalMat)))
#+END_SRC

*** Phong

#+BEGIN_SRC glsl :noweb-ref phong-vs
  void main(){
    vec4 worldPos = model * vec4(position, 1.0);
    vec4 eyePos = view * worldPos;
    vEyePos = eyePos.xyz;
    vNormal = surfaceNormal(normal, normalMat);
    vLightPos = (view * vec4(lightPos, 1.0)).xyz;
    gl_Position = proj * eyePos;
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref phong-fs
  void main() {
    vec3 L = normalize(vLightPos - vEyePos);
    vec3 E = normalize(-vEyePos);
    vec3 N = normalize(vNormal);

    float NdotL = max(0.0, (dot(N, L) + wrap) / (1.0 + wrap));
    vec3 color = ambientCol + NdotL * diffuseCol;

    float specular = 0.0;
    if (useBlinnPhong) {
      specular = blinnPhong(L, E, N);
    } else {
      specular = phong(L, E, N);
    }
    color += max(pow(specular, shininess), 0.0) * specularCol;
    gl_FragColor = vec4(color, 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/phong.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.phong
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.glsl.vertex :as vert]
     [thi.ng.glsl.lighting :as light]))

  (def shader-spec
    {:vs (glsl/assemble
          (glsl/glsl-spec
           [vert/normal]
           "
  <<phong-vs>>"))
     :fs (glsl/assemble
          (glsl/glsl-spec
           [light/phong light/blinn-phong]
           "
  <<phong-fs>>"))
     :uniforms {:view          :mat4
                :proj          :mat4
                :model         [:mat4 M44]
                :normalMat     :mat4
                :shininess     [:float 32]
                :ambientCol    [:vec3 [0 0 0]]
                :diffuseCol    [:vec3 [0.8 0.8 0.8]]
                :specularCol   [:vec3 [1 1 1]]
                :lightPos      [:vec3 [0 0 0]]
                :useBlinnPhong [:bool true]
                :wrap          [:float 0]}
     :attribs {:position       :vec3
               :normal         :vec3}
     :varying {:vNormal        :vec3
               :vEyePos        :vec3
               :vLightPos      :vec3}
     :state    {:depth-test true}})

  (defn draw
    [^WebGLRenderingContext gl spec]
    (buf/draw-arrays-with-shader gl (sh/inject-normal-matrix spec :model :view :normalMat)))
#+END_SRC

*** X-Ray

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/xray.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.xray
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.webgl.core :as gl]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.glsl.vertex :as vert]))

  (def shader-spec
    {:vs (glsl/assemble
          (glsl/glsl-spec
           [vert/normal]
           "void main() {
              vIncident = view * model * vec4(position, 1.0);
              vNormal = surfaceNormal(normal, normalMat);
              gl_Position = proj * vIncident;
            }"))
     :fs (glsl/minified
          "void main() {
             float opac = abs(dot(normalize(-vNormal), normalize(-vIncident.xyz)));
             opac = 1.0 - pow(opac, alpha);
             gl_FragColor = vec4(lightCol * opac, opac);
           }")
     :uniforms {:model      [:mat4 M44]
                :view       :mat4
                :normalMat  :mat4
                :proj       :mat4
                :lightCol   [:vec3 [1 1 1]]
                :alpha      [:float 0.5]}
     :attribs  {:position   :vec3
                :normal     :vec3}
     :varying  {:vIncident  :vec4
                :vNormal    :vec3}
     :state    {:depth-test false
                :blend true
                :blend-func [gl/src-alpha gl/one]}})

  (defn draw
    [^WebGLRenderingContext gl spec]
    (buf/draw-arrays-with-shader gl (sh/inject-normal-matrix spec :model :view :normalMat)))
#+END_SRC

*** Spotlight

#+BEGIN_SRC glsl :noweb-ref spot-vs
  void main(){
    vNormal = normal;
    vWorldPos = model * vec4(position, 1.0);
    gl_Position = proj * view * vWorldPos;
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref spot-fs
  vec3 gamma(vec3 color){
    return pow(color, vec3(2.2));
  }

  void main(){
    vec3 worldNormal = normalize(vNormal);

    vec3 camPos = (view * vWorldPos).xyz;
    vec3 lightPos = (lightView * vWorldPos).xyz;
    vec3 lightPosNormal = normalize(lightPos);
    vec3 lightSurfaceNormal = lightRot * worldNormal;

    vec3 excident = (skylight(worldNormal.y) +
                     lambert(lightSurfaceNormal, -lightPosNormal) *
                     spotlightInfluence(lightPosNormal, coneAngle, 10.0) *
                     spotlightAttenuation(lightPos, 10.0));
    gl_FragColor = vec4(gamma(excident), 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/spotlight.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.spotlight
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.glsl.lighting :as light]))

  (def shader-spec
    {:vs (glsl/minified "
  <<spot-vs>>")
     :fs (glsl/assemble
          (glsl/glsl-spec
           [light/spotlight-attenuation light/spotlight-influence
            light/lambert light/skylight]
           "
  <<spot-fs>>"))
     :uniforms {:view :mat4
                :proj :mat4
                :model [:mat4 M44]
                :lightView :mat4
                :lightRot :mat3
                :coneAngle [:float 15]}
     :attribs {:position :vec3
               :normal :vec3}
     :varying {:vNormal :vec3
               :vWorldPos :vec4}})
#+END_SRC

*** Shadow

#+BEGIN_SRC glsl :noweb-ref shadow-vs-pass1
  void main() {
    vWorldPos = model * vec4(position, 1.0);
    gl_Position = proj * view * vWorldPos;
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref shadow-fs-pass1
  void main() {
    vec3 lightPos = (view * vWorldPos).xyz;
    float depth = clamp(length(lightPos) / 10.0, 0.0, 1.0);
    gl_FragColor = vec4(vec3(depth), 1.0);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref shadow-hard
  // shadow calculation
  float lightDepth1 = texture2D(lightDepthTex, lightUV).r;                                                     
  float lightDepth2 = clamp(length(lightPos)/40.0, 0.0, 1.0);
  float bias = 0.001;
  float illuminated = step(lightDepth2, lightDepth1+bias);
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref shadow-lerp1
  float texture2DCompare(sampler2D depths, vec2 uv, float compare) {
    float depth = texture2D(depths, uv).r;
    return step(compare, depth);
  }

  float texture2DShadowLerp(sampler2D depths, vec2 size, vec2 uv, float compare) {
    vec2 texelSize = vec2(1.0) / size;
    vec2 f = fract(uv * size + 0.5);
    vec2 centroidUV = floor(uv * size + 0.5) / size;

    float lb = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 0.0), compare);
    float lt = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 1.0), compare);
    float rb = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 0.0), compare);
    float rt = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 1.0), compare);
    return mix(mix(lb, lt, f.y), mix(rb, rt, f.y), f.x);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref shadow-lerp2
  // shadow calculation
  float bias = 1e-4;
  float lightDepth2 = clamp(length(lightPos) / 10.0, 0.0, 1.0) - bias;
  float illuminated = texture2DShadowLerp(lightDepthTex, lightDepthSize, lightUV, lightDepth2);
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref shadow-fs-pass2 :noweb yes
  vec3 gamma(vec3 color) {
    return pow(color, vec3(2.2));
  }

  <<shadow-lerp1>>

  void main() {
    vec3 worldNormal = normalize(vNormal);

    vec3 camPos = (view * vWorldPos).xyz;
    vec3 lightPos = (lightView * vWorldPos).xyz;
    vec3 lightPosNormal = normalize(lightPos);
    vec3 lightSurfaceNormal = lightRot * worldNormal;

    vec4 lightDevice = lightProj * vec4(lightPos, 1.0);
    vec2 lightDeviceNormal = lightDevice.xy / lightDevice.w;
    vec2 lightUV = lightDeviceNormal * 0.5 + 0.5;

    <<shadow-lerp2>>

    vec3 excident = (0.4 + skylight(worldNormal.y) +
                     lambert(lightSurfaceNormal, -lightPosNormal) *
                     spotlightInfluence(lightPosNormal, coneAngle, 10.0) *
                     spotlightAttenuation(lightPos, 10.0) *
                     illuminated);

    //excident *=  worldNormal * 0.5 + 0.5; // TODO remove, debug only

    gl_FragColor = vec4(gamma(excident), 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/shadow.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.shadow
    (:require
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.webgl.core :as gl]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.glsl.lighting :as light]))

  (def light-pass-spec
    {:vs (glsl/minified "
  <<shadow-vs-pass1>>")
     :fs (glsl/minified "
  <<shadow-fs-pass1>>")
     :uniforms {:view     :mat4
                :proj     :mat4
                :model    [:mat4 M44]} 
     :attribs {:position  :vec3}
     :varying {:vWorldPos :vec4}})

  (def cam-pass-spec
    {:vs (glsl/minified "
  <<spot-vs>>")
     :fs (glsl/assemble
          (glsl/glsl-spec
           [light/spotlight-attenuation light/spotlight-influence
            light/lambert light/skylight]
           "
  <<shadow-fs-pass2>>"))
     :uniforms {:view           :mat4
                :proj           :mat4
                :model          [:mat4 M44]
                :lightView      :mat4
                :lightProj      :mat4
                :lightRot       :mat3
                :lightDepthTex  [:sampler2D 0]
                :lightDepthSize :vec2
                :coneAngle      [:float 15]}
     :attribs  {:position       :vec3
                :normal         :vec3}
     :varying  {:vNormal        :vec3
                :vWorldPos      :vec4}})

  (defn init-light-fbo
    [^WebGLRenderingContext gl size]
    (let [float-ext (.call (aget gl "getFloatExtension")
                           gl #js {:require ["renderable"]
                                   :prefer  ["filterable" "half"]})
          tex (buf/make-texture
               gl {:type   (.-type float-ext)
                   :width  size
                   :height size
                   :filter gl/linear
                   :wrap   gl/clamp-to-edge})]
      {:tex tex
       :fbo (-> (buf/make-fbo gl)
                (gl/bind)
                (gl/set-fbo-color-texture tex)
                (gl/set-fbo-depth-buffer (buf/make-depth-buffer gl size size))
                (gl/unbind))}))

  (defn draw-light-pass
    [^WebGLRenderingContext gl {:keys [fbo tex]} draw-fn]
    (gl/bind fbo)
    (doto gl
      (gl/set-viewport 0 0 (:width tex) (:height tex))
      (gl/clear-color-buffer 1 1 1 1)
      (gl/clear-depth-buffer 1)
      (gl/enable gl/depth-test)
      (gl/cull-faces gl/front))
    (draw-fn)
    (gl/unbind fbo))

  (defn draw-cam-pass
    [^WebGLRenderingContext gl tex draw-fn]
    (doto gl
      (gl/clear-depth-buffer 1)
      (gl/enable gl/depth-test)
      (gl/cull-faces gl/back))
    (gl/bind tex 0)
    (draw-fn {:lightDepthTex 0
              :lightDepthSize [(:width tex) (:height tex)]}))
#+END_SRC

*** 2D Overlay

#+BEGIN_SRC glsl :noweb-ref overlay-vs
  void main() {
    vUV = uv;
    gl_Position = proj * model * vec4(position, 0.0, 1.0);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref overlay-fs
  void main() {
    gl_FragColor = texture2D(tex, vUV);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/overlay.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.overlay
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.rect :as r]
     [thi.ng.geom.webgl.core :as gl]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.typedarrays.core :as arrays]
     [thi.ng.glsl.core :as glsl :include-macros true]
     [thi.ng.math.core :as m]))

  (def shader-spec
    {:vs (glsl/minified "
  <<overlay-vs>>")
     :fs (glsl/minified "
  <<overlay-fs>>")
     :uniforms {:proj       :mat4
                :model      [:mat4 M44]
                :tex        [:sampler2D 0]}
     :attribs  {:position   :vec2
                :uv         :vec2}
     :varying  {:vUV        :vec2}
     :state    {:depth-test false
                :blend true
                :blend-func [gl/src-alpha gl/one-minus-src-alpha]}})

  (defn overlay-spec-from-rect
    ([^WebGLRenderingContext gl]
       (overlay-spec-from-rect gl (r/rect 1) true))
    ([^WebGLRenderingContext gl r init-shader?]
       (let [vbuf (arrays/float32 8)
             [a b c d] (g/vertices r)
             _ (g/copy-to-buffer [a b d c] vbuf 2 0)
             spec {:attribs  (buf/make-attribute-buffers
                              gl gl/static-draw
                              {:position {:data vbuf :size 2}
                               :uv       {:data (arrays/float32 [0 0, 1 0, 0 1, 1 1]) :size 2}})
                   :uniforms {:tex  0
                              :proj (gl/ortho)}
                   :mode     gl/triangle-strip
                   :num-vertices 4}]
         (if init-shader?
           (assoc spec :shader (sh/make-shader-from-spec gl shader-spec))
           spec))))

  (defn draw-overlay2d
    [^WebGLRenderingContext gl {:keys [tex viewport pos width height] :as spec}]
    (let [[vw vh] (:size (or viewport (gl/get-viewport-rect gl)))
          x (m/map-interval (pos 0) 0 vw -1 1)
          y (m/map-interval (pos 1) 0 vh -1 1)
          s [(* 2.0 (/ width vw)) (* 2.0 (/ height vh))]
          spec (assoc-in spec [:uniforms :model] (-> M44 (g/translate x y 0) (g/scale s)))]
      (when tex
        (gl/bind tex (get-in spec [:uniforms :tex])))
      (buf/draw-arrays-with-shader gl spec)))
#+END_SRC
